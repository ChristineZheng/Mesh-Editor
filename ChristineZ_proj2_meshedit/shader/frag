uniform int outputID;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;

#define PI 3.1415926

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadeEnvmapReflection();

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        // Do something interesting here for extra credit.
        // gl_FragColor = vec4(???, 1.0);
        // return;
        //gl_FragColor = vec4(shadePhongForCow(vec3(10, 10, 10)), 1.0);
        //return;
    }
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);

    vec3 out_vec = eyePos - vertex;
    float r_2 = pow(length(out_vec), 2.0);
    out_vec = normalize(out_vec);

    float sharp = max(0.0, dot(n, out_vec));
    float intensity = 30.0;
    vec3 Kd = vec3(0.9, 0.2, 0.7);
    return Kd * (intensity / r_2) * sharp;

    // float diffuse = abs(dot(out_vec, n));
    // return vec3(diffuse);
}




vec3 shadePhong(vec3 lightPos)
{
    // TODO Part 7.
    // TODO Compute Phong shading here. You can choose any color you like. But make
    // TODO sure that you have noticeable specular highlights in the shading.
    // TODO Variables to use: eyePos, lightPos, normal, vertex

    vec3 n = normalize(normal);
    float I = 1.0;
    vec3 L = lightPos - vertex;
    float r_2 = pow(length(L), 2.0);
    L = normalize(L);

    vec3 V = eyePos - vertex;
    V = normalize(V);

    vec3 h = normalize(V + L);
    float p = 200.0;
    float sharper = pow(max(0.0, dot(n, h)), p); 
    vec3 Ks = vec3(1.0, 1.0, 1.0);
    float intensity_s = 100.0;
    
    vec3 specular = Ks * (intensity_s / r_2) * sharper;
    vec3 diffuse = shadeDiffuseFromEye();
    vec3 Ka = vec3(0.2, 0.0, 0.0);
    float intensity_a = 1.0;
    vec3 ambient = Ka * intensity_a;

    return ambient + diffuse + specular;

}




